--------------------------------------------------------------------LOVE SANDWICHES

________________________________Introduction

Python in real world context

Build a project called Love SANDWICHES

A command line based Python program to handle data  automation for a 
fictional sandwich company.

Love Sandwiches runs a local market stall, selling  a small range of 
sandwiches.
For each market day, their staff pre-make stock to sell. If they sell out 
of a particular sandwich, their staff make extra for their customers. 
And the unsold  ones are thrown away at the end of the day.

we need to make a program that:
              collects the company's market day sales data
              calculate the surplus for the day
              produce reccommendations for the number of each sandwich to make
                  for the next market day
              
        goal to save staff time by automating a repetitive task
                reduce surplus

we will wire up our Python to interact with a Google Sheet- and be able
   to push and pull data to and from the spreadsheet


____________________________________________________Getting set up
-----------------------------------------------Google Sheet

It’s important to note here that when you want  to access and manipulate data from a spreadsheet
you should keep the information within  your tables in clean rows and columns.
Just column headings and cells of data.

----------------------------------------------- Activating API credentials


--------------------------------------------------Calculating surplus data
------------------------request stock data from spreadsheet

stock - sales = surplus

1. define function to calculate the surplus data

def calculate_surplus_data(sales_row):
    """
    Compare sales with stock and calculate the surplus for each item type.

    The surplus is defined as the sales figure subtracted from the stock:
    - Positive surplus indicates waste
    - Negative surplus indicates extra made when stock was sold out.
    """
    print("Calculating surplus data...\n")
    stock = SHEET.worksheet("stock").get_all_values()
    stock_row = stock[-1]
    print(stock_row)

------------------------calculateing surplus data
zip() method- When used with a for loop, the zip method allows  us to iterate through two or more iterable data
structures in a single loop. In this case,  our iterable data structures, are lists.

 surplus_data = []
    for stock, sales in zip(stock_row, sales_row):
        surplus = int(stock) - sales
        surplus_data.append(surplus)

    return surplus_data


------------------------insert surplus data into spreadsheet
def update_surplus_worksheet(data):
    """
    Update surplus worksheet, add new row with the list data provided
    """
    print("Updating surplus worksheet...\n")
    surplus_worksheet = SHEET.worksheet("surplus")
    surplus_worksheet.append_row(data)
    print("Surplus worksheet updated successfully.\n")

------other converted
def main():
    """
    Run all program functions
    """
    data = get_sales_data()
    sales_data = [int(num) for num in data]
    update_sales_worksheet(sales_data)
    new_surplus_data = calculate_surplus_data(sales_data)
    update_surplus_worksheet(new_surplus_data)


print("Welcome to Love Sandwiches Data Automation")
main()

------------------------------------------------------------------refactoring update functions
refactor 2 functions into 1 (both update functions- update sales and update surplus.)

refactoring = restructuring of code to improve its operation without altering functionality

1st example- rewriting code to avoid repetition

     - identify differences in code
         eg sales worksheet - "sales"
            surplus worksheet- "surplus"

      new function needs to be able to change these parts of the code depending on which worksheet we want to update

def update_worksheet(data, worksheet):
    """
    Receives a list of integers to be inserted into a worksheet
    Update the relevant worksheet with the data provided
    """
    print(f"Updating {worksheet} worksheet...\n")
    worksheet_to_update = SHEET.worksheet(worksheet)
    worksheet_to_update.append_row(data)
    print(f"{worksheet} worksheet updated successfully\n")

---other code

def main():
    """
    Run all program functions
    """
    data = get_sales_data()
    sales_data = [int(num) for num in data]
    update_worksheet(sales_data, "sales")
    new_surplus_data = calculate_surplus_data(sales_data)
    update_worksheet(new_surplus_data, "surplus")



------------------------------------------------------------working out what to make for next time
--------------------------------------getting sales data
 get the sales data  we need to make our stock calculation.

 Our recommended stock numbers for  the next market will be calculated
using the average number of  sandwiches sold in the last 5 markets.

get data for each sandwich type- last five entries- add up and divide by 5.

Then The marketing department at Love Sandwiches want to increase the stock numbers by 10% above the
averages, to encourage more sales. So our program  will take this number and increase it by 10%.
Also round to whole sandwiches

The first thing we need to do then, is  get the last 5 records for each sandwich.
So we’ll 
-create a function to do that. 

def get_last_5_entries_sales
"""
    Collects columns of data from sales worksheet, collecting
    the last 5 entries for each sandwich and returns the data
    as a list of lists.
    """

-create sales avariable
    sales = SHEET.worksheet("sales")

-use col_values() method to to get data in columns
    column = sales.col_values(3)    - third column examole
    print(column)

-  get lists of numbers from every  column 1, 2, 3 and all the way up to column 6.
   get all of these  columns as lists nested in a list
   with a for loop.

 - create a new empty list called columns.
            columns = [] 
-append our column lists into  this list so that we have them all together.

-create a for loop. -loop 6 times, one for each column in my data.
-use the value of the loop  index to access each column of data in turn.
           
           for ind in range(1, 7):

-create a column variable to store the column inside our for loop
use the col_values() method on the  sales variable, and pass it our ind variable.
      
      column = sales.col_values(ind)

append our column  list to our columns list.

       columns.append(column[-5:])

- limit to last 5 entries from each column. 
- use a slice
     [-5]


def get_last_5_entries_sales():
    """
    Collects columns of data from sales worksheet, collecting
    the last 5 entries for each sandwich and returns the data
    as a list of lists.
    """
    sales = SHEET.worksheet("sales")

    columns = []
    for ind in range(1, 7):
        column = sales.col_values(ind)
        columns.append(column[-5:])

    return columns

--------------------------------------------calculate stock averages

use this data to calculate our recommended stock for the next Love Sandwiches market.

create a new function called calculate_stock_data,
pass it the stock_data that our get_last_5_entries_sales function returned.


def calculate_stock_data(data):
    """
    Calculate the average stock for each item type, adding 10%
    """
    print("Calculating stock data...\n")

-function needs to calculate the average from each list in our data.
-use another for loop and we'll insert our completed averages into a new list as we iterate through our for loop.

- set up the new empty list first, I’ll name this new_stock_data.

       new_stock_data = []

- for loop, to loop through each column in our data.
       
       for column in data:

- to do mathematical calculations with our column values,
we need to convert them into integers again  with a list comprehension.
     
     int_column = [int(num) for num in column]

- work out averages- 
-the sum of our values, divided by the number of values.
- do this using the handy sum and len methods in Python.
declare a new variable called average,
and we'll calculate the average as the sum  of our int_column data divided by its length
   
                 average = sum(int_column) / len(int_column)

- add 10% to this, because additional stock  often results in better sales.
create a new variable called stock_num and make its value the calculated average multiplied by 1.1,
which will add 10% to the average.

           stock_num = average * 1.1

-append this calculated stock_num to the new_stock_data list outside the for loop.
       
       new_stock_data.append(round(stock_num))

+round our stock numbers to whole  numbers, so we'll use the round() method to do this.

-return this value from our function.

         return new_stock_data

-assign it to a variable back where function is called   (in main)

    stock_data = calculate_stock_data(sales_columns)

---------------------------------------------challenge
- build a function that will create a dictionary of data to the terminal for the user.

# student writes function
def get_stock_values(data):
    """
    Print out the calculated stock numbers for each sandwich type.
    """
    headings = SHEET.worksheet("stock").get_all_values()[0]

    # headings = SHEET.worksheet('stock').row_values(1)

    print("Make the following numbers of sandwiches for next market:\n")

    # new_data = {}
    # for heading, stock_num in zip(headings, data):
    #     new_data[heading] = stock_num
    # return new_data
    
    return {heading: data for heading, data in zip(headings, data)}
    
stock_values = get_stock_values(stock_data)
print(stock_values)


         






 
