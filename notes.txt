--------------------------------------------------------------------LOVE SANDWICHES

________________________________Introduction

Python in real world context

Build a project called Love SANDWICHES

A command line based Python program to handle data  automation for a 
fictional sandwich company.

Love Sandwiches runs a local market stall, selling  a small range of 
sandwiches.
For each market day, their staff pre-make stock to sell. If they sell out 
of a particular sandwich, their staff make extra for their customers. 
And the unsold  ones are thrown away at the end of the day.

we need to make a program that:
              collects the company's market day sales data
              calculate the surplus for the day
              produce reccommendations for the number of each sandwich to make
                  for the next market day
              
        goal to save staff time by automating a repetitive task
                reduce surplus

we will wire up our Python to interact with a Google Sheet- and be able
   to push and pull data to and from the spreadsheet


____________________________________________________Getting set up
-----------------------------------------------Google Sheet

Itâ€™s important to note here that when you want  to access and manipulate data from a spreadsheet
you should keep the information within  your tables in clean rows and columns.
Just column headings and cells of data.

----------------------------------------------- Activating API credentials


--------------------------------------------------Calculating surplus data
------------------------request stock data from spreadsheet

stock - sales = surplus

1. define function to calculate the surplus data

def calculate_surplus_data(sales_row):
    """
    Compare sales with stock and calculate the surplus for each item type.

    The surplus is defined as the sales figure subtracted from the stock:
    - Positive surplus indicates waste
    - Negative surplus indicates extra made when stock was sold out.
    """
    print("Calculating surplus data...\n")
    stock = SHEET.worksheet("stock").get_all_values()
    stock_row = stock[-1]
    print(stock_row)

------------------------calculateing surplus data
zip() method- When used with a for loop, the zip method allows  us to iterate through two or more iterable data
structures in a single loop. In this case,  our iterable data structures, are lists.

 surplus_data = []
    for stock, sales in zip(stock_row, sales_row):
        surplus = int(stock) - sales
        surplus_data.append(surplus)

    return surplus_data


------------------------insert surplus data into spreadsheet
def update_surplus_worksheet(data):
    """
    Update surplus worksheet, add new row with the list data provided
    """
    print("Updating surplus worksheet...\n")
    surplus_worksheet = SHEET.worksheet("surplus")
    surplus_worksheet.append_row(data)
    print("Surplus worksheet updated successfully.\n")

------other converted
def main():
    """
    Run all program functions
    """
    data = get_sales_data()
    sales_data = [int(num) for num in data]
    update_sales_worksheet(sales_data)
    new_surplus_data = calculate_surplus_data(sales_data)
    update_surplus_worksheet(new_surplus_data)


print("Welcome to Love Sandwiches Data Automation")
main()

------------------------------------------------------------------refactoring update functions
refactor 2 functions into 1 (both update functions- update sales and update surplus.)

refactoring = restructuring of code to improve its operation without altering functionality

1st example- rewriting code to avoid repetition

     - identify differences in code
         eg sales worksheet - "sales"
            surplus worksheet- "surplus"

      new function needs to be able to change these parts of the code depending on which worksheet we want to update

def update_worksheet(data, worksheet):
    """
    Receives a list of integers to be inserted into a worksheet
    Update the relevant worksheet with the data provided
    """
    print(f"Updating {worksheet} worksheet...\n")
    worksheet_to_update = SHEET.worksheet(worksheet)
    worksheet_to_update.append_row(data)
    print(f"{worksheet} worksheet updated successfully\n")

---other code

def main():
    """
    Run all program functions
    """
    data = get_sales_data()
    sales_data = [int(num) for num in data]
    update_worksheet(sales_data, "sales")
    new_surplus_data = calculate_surplus_data(sales_data)
    update_worksheet(new_surplus_data, "surplus")


